import * as React from "react";
import AppBar from "@mui/material/AppBar";
import Box from "@mui/material/Box";
import Toolbar from "@mui/material/Toolbar";
import IconButton from "@mui/material/IconButton";
import Typography from "@mui/material/Typography";
import InputBase from "@mui/material/InputBase";
import Badge from "@mui/material/Badge";
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import NotificationsIcon from "@mui/icons-material/Notifications";
import MenuIcon from "@mui/icons-material/Menu";
import { styled, alpha } from "@mui/material/styles";
import Stack from "@mui/material/Stack"; // Add this import
import Button from "@mui/material/Button"; // Already imported
import useMediaQuery from "@mui/material/useMediaQuery";
import { useTheme } from "@mui/material/styles";
import Drawer from "@mui/material/Drawer";
import CssBaseline from "@mui/material/CssBaseline";
import Paper from "@mui/material/Paper";
import List from "@mui/material/List";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemAvatar from "@mui/material/ListItemAvatar";
import ListItemText from "@mui/material/ListItemText";
import ListSubheader from "@mui/material/ListSubheader";
import Avatar from "@mui/material/Avatar";
import { useNavigate } from "react-router-dom";
import logo from "../../assets/logo.png";

const Search = styled("div")(({ theme }) => ({
  position: "relative",
  borderRadius: theme.shape.borderRadius,
  backgroundColor: alpha(theme.palette.common.black, 0.05),
  "&:hover": {
    backgroundColor: alpha(theme.palette.common.black, 0.10),
  },
  marginRight: theme.spacing(2),
  marginLeft: 0,
  width: "100%",
  [theme.breakpoints.up("sm")]: {
    marginLeft: theme.spacing(3),
    width: "auto",
  },
}));

const SearchIconWrapper = styled("div")(({ theme }) => ({
  padding: theme.spacing(0, 2),
  height: "100%",
  position: "absolute",
  pointerEvents: "none",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
}));

const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: "inherit",
  "& .MuiInputBase-input": {
    padding: theme.spacing(1, 1, 1, 0),
    paddingLeft: `calc(1em + ${theme.spacing(4)})`,
    transition: theme.transitions.create("width"),
    width: "100%",
    [theme.breakpoints.up("md")]: {
      width: "20ch",
    },
  },
}));

const messages = [
  {
    id: 1,
    primary: "Brunch this week?",
    secondary:
      "I'll be in the neighbourhood this week. Let's grab a bite to eat",
    person: "/static/images/avatar/5.jpg",
  },
  {
    id: 2,
    primary: "Birthday Gift",
    secondary:
      "Do you have a suggestion for a good present for John on his work anniversary. I am really confused & would love your thoughts on it.",
    person: "/static/images/avatar/1.jpg",
  },
  {
    id: 3,
    primary: "Recipe to try",
    secondary: "I am try out this new BBQ recipe, I think this might be amazing",
    person: "/static/images/avatar/2.jpg",
  },
  {
    id: 4,
    primary: "Yes!",
    secondary: "I have the tickets to the ReactConf for this year.",
    person: "/static/images/avatar/3.jpg",
  },
  {
    id: 5,
    primary: "Doctor's Appointment",
    secondary:
      "My appointment for the doctor was rescheduled for next Saturday.",
    person: "/static/images/avatar/4.jpg",
  },
  {
    id: 6,
    primary: "Discussion",
    secondary:
      "Menus that are generated by the bottom app bar (such as a bottom navigation drawer or overflow menu) open as bottom sheets at a higher elevation than the bar.",
    person: "/static/images/avatar/5.jpg",
  },
  {
    id: 7,
    primary: "Summer BBQ",
    secondary:
      "Who wants to have a cookout this weekend? I just got some furniture for my backyard and would love to fire up the grill.",
    person: "/static/images/avatar/1.jpg",
  },
];

function NotificationDrawer({ open, onClose }) {
  // Add state to track read notifications (optional)
  const [readIds, setReadIds] = React.useState([]);

  const handleMarkAsRead = (id) => {
    setReadIds((prev) => [...prev, id]);
  };

  const handleView = (id) => {
    // Implement your view logic here (e.g., open a modal or navigate)
    alert(`Viewing notification ${id}`);
  };

  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          width: { xs: "90vw", sm: 400, md: 420 },
          maxWidth: "100vw",
          height: "100%",
        },
      }}
    >
      <CssBaseline />
      <Paper square sx={{ pb: "50px", height: "100%", overflow: "auto" }}>
        <Typography
          variant="h6"
          gutterBottom
          component="div"
          sx={{ p: 2, pb: 0 }}
        >
          Notifications
        </Typography>
        <List sx={{ mb: 2 }}>
          {messages.map(({ id, primary, secondary, person }) => (
            <React.Fragment key={id}>
              {id === 1 && (
                <ListSubheader sx={{ bgcolor: "background.paper" }}>
                  Today
                </ListSubheader>
              )}
              {id === 3 && (
                <ListSubheader sx={{ bgcolor: "background.paper" }}>
                  Yesterday
                </ListSubheader>
              )}
              <ListItemButton
                selected={readIds.includes(id)}
                sx={{ alignItems: "flex-start" }}
              >
                <ListItemAvatar>
                  <Avatar alt="Profile Picture" src={person} />
                </ListItemAvatar>
                <ListItemText
                  primary={primary}
                  secondary={secondary}
                  sx={{ mr: 2 }}
                />
                <Stack direction="column" spacing={1}>
                  <Button
                    size="small"
                    variant="outlined"
                    color="primary"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleView(id);
                    }}
                  >
                    View
                  </Button>
                  <Button
                    size="small"
                    variant="contained"
                    color="success"
                    disabled={readIds.includes(id)}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleMarkAsRead(id);
                    }}
                  >
                    {readIds.includes(id) ? "Read" : "Done"}
                  </Button>
                </Stack>
              </ListItemButton>
            </React.Fragment>
          ))}
        </List>
      </Paper>
    </Drawer>
  );
}

export default function AdminNavbar() {
  const [anchorEl, setAnchorEl] = React.useState(null);
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));

  // Notification Drawer state
  const [notifOpen, setNotifOpen] = React.useState(false);

  // Responsive menu for mobile
  const [mobileMenuAnchor, setMobileMenuAnchor] = React.useState(null);
  const handleMobileMenuOpen = (event) => {
    setMobileMenuAnchor(event.currentTarget);
  };
  const handleMobileMenuClose = () => {
    setMobileMenuAnchor(null);
  };

  const navigate = useNavigate();

  const menuItems = [
    { label: "Pending Trip", to: "/allpendingtrips" },
    { label: "Create a Trip", to: "/createtrip01" },
    { label: "Upcoming Trip", to: "/allupcomingtrips" },
  ];

  const renderMobileMenu = (
    <Menu
      anchorEl={mobileMenuAnchor}
      anchorOrigin={{ vertical: "top", horizontal: "right" }}
      keepMounted
      transformOrigin={{ vertical: "top", horizontal: "right" }}
      open={Boolean(mobileMenuAnchor)}
      onClose={handleMobileMenuClose}
    >
      {menuItems.map((item) => (
        <MenuItem key={item.label} onClick={handleMobileMenuClose}>
          {item.label}
        </MenuItem>
      ))}
      <MenuItem
        onClick={() => {
          setNotifOpen(true);
          handleMobileMenuClose();
        }}
      >
        <IconButton size="large" color="inherit">
          <Badge badgeContent={messages.length} color="error">
            <NotificationsIcon />
          </Badge>
        </IconButton>
        <span>Notifications</span>
      </MenuItem>
      <MenuItem>
        <Button
          variant="contained"
          sx={{
            bgcolor: "#ffe600",
            color: "#222",
            fontWeight: 600,
            borderRadius: 2,
            px: 3,
            py: 1,
            boxShadow: "none",
            "&:hover": { bgcolor: "#ffe600" },
          }}
        >
          Login
        </Button>
      </MenuItem>
    </Menu>
  );

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar
        position="static"
        elevation={0}
        sx={{ bgcolor: "#fff", color: "#222", borderBottom: "1px solid #eee" }}
      >
        <Toolbar>
          <img
            src={logo} // Use your imported logo here
            alt="Logo"
            style={{
              width: 32,
              height: 32,
              marginRight: 16,
            }}
          />
          <Search>
            <SearchIconWrapper>
              <svg
                width="20"
                height="20"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                viewBox="0 0 24 24"
              >
                <circle cx="11" cy="11" r="8" />
                <line x1="21" y1="21" x2="16.65" y2="16.65" />
              </svg>
            </SearchIconWrapper>
            <StyledInputBase
              placeholder="Searchâ€¦"
              inputProps={{ "aria-label": "search" }}
            />
          </Search>
          <Box sx={{ flexGrow: 1 }} />
          {!isMobile && (
            <Box sx={{ display: "flex", alignItems: "center", gap: 4 }}>
              {menuItems.map((item) => (
                <Typography
                  key={item.label}
                  variant="body1"
                  onClick={() => navigate(item.to)}
                  sx={{
                    fontWeight: 500,
                    cursor: "pointer",
                    mx: 2,
                    px: 1.5,
                    py: 0.5,
                    borderRadius: 1,
                    transition: "background 0.2s",
                    "&:hover": {
                      backgroundColor: "#f5f5f5",
                      color: "#222",
                    },
                  }}
                >
                  {item.label}
                </Typography>
              ))}
              <IconButton
                size="large"
                color="inherit"
                onClick={() => setNotifOpen(true)}
                sx={{
                  transition: "background 0.2s",
                  borderRadius: 2,
                  "&:hover": {
                    backgroundColor: "#f5f5f5",
                  },
                }}
              >
                <Badge badgeContent={messages.length} color="error">
                  <NotificationsIcon />
                </Badge>
              </IconButton>
              <Button
                variant="contained"
                sx={{
                  bgcolor: "#ffe600",
                  color: "#222",
                  fontWeight: 600,
                  borderRadius: 2,
                  px: 3,
                  py: 1,
                  boxShadow: "none",
                  transition: "background 0.2s",
                  "&:hover": { bgcolor: "#ffe600", backgroundColor: "#fffde7" },
                }}
              >
                Login
              </Button>
            </Box>
          )}
          {isMobile && (
            <IconButton
              size="large"
              edge="end"
              color="inherit"
              aria-label="menu"
              onClick={handleMobileMenuOpen}
            >
              <MenuIcon />
            </IconButton>
          )}
        </Toolbar>
      </AppBar>
      {renderMobileMenu}
      <NotificationDrawer
        open={notifOpen}
        onClose={() => setNotifOpen(false)}
      />
    </Box>
  );
}